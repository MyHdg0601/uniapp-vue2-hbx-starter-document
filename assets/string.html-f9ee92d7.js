import{_ as t,W as e,X as i,Y as o,a0 as n,Z as l,$ as p,a1 as s,C as c}from"./framework-d7afda32.js";const r={},u=s(`<h3 id="isemptystring-str-trim-false" tabindex="-1"><a class="header-anchor" href="#isemptystring-str-trim-false" aria-hidden="true">#</a> isEmptyString(str, trim = <code>false</code>)</h3><p>是否为空字符串</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><ul><li><p>str：<code>string | null</code> 字符串</p></li><li><p>trim：<code>boolean</code> 是否trim()</p></li></ul><h4 id="返回" tabindex="-1"><a class="header-anchor" href="#返回" aria-hidden="true">#</a> 返回</h4><p><code>boolean</code> 是否为空字符串</p><details class="hint-container details"><summary>使用示例（点击展开查看）</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str4 <span class="token operator">=</span> <span class="token string">&quot;some string&quot;</span><span class="token punctuation">;</span>

<span class="token function">isEmptyString</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>

<span class="token function">isEmptyString</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>

<span class="token function">isEmptyString</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>

<span class="token function">isEmptyString</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="isnotemptystring-str-trim-false" tabindex="-1"><a class="header-anchor" href="#isnotemptystring-str-trim-false" aria-hidden="true">#</a> isNotEmptyString(str, trim = <code>false</code>)</h3><p>是否不为空字符串</p><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h4><ul><li><p>str：<code>string | null</code> 字符串</p></li><li><p>trim：<code>boolean</code> 是否trim()</p></li></ul><h4 id="返回-1" tabindex="-1"><a class="header-anchor" href="#返回-1" aria-hidden="true">#</a> 返回</h4><p><code>boolean</code> 是否不为空字符串</p><details class="hint-container details"><summary>使用示例（点击展开查看）</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str4 <span class="token operator">=</span> <span class="token string">&quot;some string&quot;</span><span class="token punctuation">;</span>

<span class="token function">isNotEmptyString</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; false</span>

<span class="token function">isNotEmptyString</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; false</span>

<span class="token function">isNotEmptyString</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; false</span>

<span class="token function">isNotEmptyString</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="splitstring-str-separator" tabindex="-1"><a class="header-anchor" href="#splitstring-str-separator" aria-hidden="true">#</a> splitString(str, separator = <code>&quot;,&quot;</code>)</h3><p>分割字符串，与 <code>String#split</code> 差别是当 <code>str</code> 为 <code>null</code> 或者 <code>&quot;&quot;</code> 时的返回值为 <code>[]</code>，并且会先去除首尾的分隔符再进行分割</p><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2" aria-hidden="true">#</a> 参数</h4><ul><li><p>str：<code>string | null</code> 待分割字符串</p></li><li><p>separator：<code>string</code> 分隔符</p></li></ul><h4 id="返回-2" tabindex="-1"><a class="header-anchor" href="#返回-2" aria-hidden="true">#</a> 返回</h4><p><code>string[]</code>：字符串分割结果</p><details class="hint-container details"><summary>使用示例（点击展开查看）</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">&quot;some,string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str4 <span class="token operator">=</span> <span class="token string">&quot;;some;string;&quot;</span><span class="token punctuation">;</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; []</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; []</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; [&quot;some&quot;, &quot;string&quot;]</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str4<span class="token punctuation">,</span> <span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; [&quot;some&quot;, &quot;string&quot;]</span>
<span class="token comment">// 字符串首尾的分隔符被去掉了，如果使用String#split的返回值为 [&quot;&quot;, &quot;some&quot;, &quot;string&quot;, &quot;&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="tohumpstring-str" tabindex="-1"><a class="header-anchor" href="#tohumpstring-str" aria-hidden="true">#</a> toHumpString(str)</h3><p>字符串下划线风格转驼峰风格</p><h4 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3" aria-hidden="true">#</a> 参数</h4><ul><li>str：<code>string | null</code> 待转换字符串</li></ul><h4 id="返回-3" tabindex="-1"><a class="header-anchor" href="#返回-3" aria-hidden="true">#</a> 返回</h4><p><code>string | null</code> 驼峰风格的字符串</p><details class="hint-container details"><summary>使用示例（点击展开查看）</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&quot;some_string&quot;</span><span class="token punctuation">;</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; null</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;someString&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="tounderlinestring" tabindex="-1"><a class="header-anchor" href="#tounderlinestring" aria-hidden="true">#</a> toUnderlineString</h3><p>字符串驼峰风格转下划线风格</p><h4 id="参数-4" tabindex="-1"><a class="header-anchor" href="#参数-4" aria-hidden="true">#</a> 参数</h4><ul><li>str：<code>string | null</code> 待转换字符串</li></ul><h4 id="返回-4" tabindex="-1"><a class="header-anchor" href="#返回-4" aria-hidden="true">#</a> 返回</h4><p><code>string | null</code> 下划线风格的字符串</p><details class="hint-container details"><summary>使用示例（点击展开查看）</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&quot;someString&quot;</span><span class="token punctuation">;</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; null</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;some_string&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="convertrelativepath-value-options-baseurl-config-http-sourcebaseurl-domain-null" tabindex="-1"><a class="header-anchor" href="#convertrelativepath-value-options-baseurl-config-http-sourcebaseurl-domain-null" aria-hidden="true">#</a> convertRelativePath(value, options = <code>{baseUrl: #Config.http.sourceBaseUrl, domain: null}</code>)</h3>`,36),d=s(`<h4 id="参数-5" tabindex="-1"><a class="header-anchor" href="#参数-5" aria-hidden="true">#</a> 参数</h4><ul><li><p>value：<code>string | null</code> 源路径</p></li><li><p>options：<code>ConvertRelativePathOptions</code> 转换配置</p></li></ul><h4 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h4><h5 id="convertrelativepathoptions" tabindex="-1"><a class="header-anchor" href="#convertrelativepathoptions" aria-hidden="true">#</a> ConvertRelativePathOptions</h5><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>baseUrl</td><td>路径基地址</td><td>string</td><td>-</td><td><code>Config.http.sourceBaseUrl</code></td></tr><tr><td>domain</td><td>域名</td><td>string / null</td><td>-</td><td>-</td></tr></tbody></table><h4 id="返回-5" tabindex="-1"><a class="header-anchor" href="#返回-5" aria-hidden="true">#</a> 返回</h4><p><code>string | null</code> 转换后的路径</p><details class="hint-container details"><summary>使用示例（点击展开查看）</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url2 <span class="token operator">=</span> <span class="token string">&quot;/someurl&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url3 <span class="token operator">=</span> <span class="token string">&quot;someurl&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url4 <span class="token operator">=</span> <span class="token string">&quot;https://someurl&quot;</span><span class="token punctuation">;</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; null</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;#路径基地址/someurl&quot;</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>url3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;#路径基地址/someurl&quot;</span>
<span class="token comment">// 自动添加了斜杠</span>

<span class="token function">splitString</span><span class="token punctuation">(</span>url4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; &quot;https://someurl&quot;</span>
<span class="token comment">// 如果源路径带有协议头或者开头部分与baseUrl相同，则原样返回</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,8);function m(v,k){const a=c("RouterLink");return e(),i("div",null,[u,o("p",null,[n("转换相对路径，为相对路径Url拼接基地址 "),l(a,{to:"/guide/network.html"},{default:p(()=>[n("网络请求")]),_:1})]),d])}const b=t(r,[["render",m],["__file","string.html.vue"]]);export{b as default};
